@page "/organization/list/{Page}"
@page "/organization/{Transaction}"
@addTagHelper *, BlazorStrap
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@using BlazorCrud.Shared.Data
@inject LocalStorage Storage

@if (Transaction == "modified")
{
    <Alert Color="Color.Success" IsDismissible="true">
        Organization successfully updated in the system.
    </Alert>
}
@if (Transaction == "cancelled")
{
    <Alert Color="Color.Warning" IsDismissible="true">
        Organization transaction cancelled.
    </Alert>
}

<h1>Organization Data</h1>

@if (isLoggedOn())
{
    <p>
        <a href="/organization/new">Add New Organization</a>
    </p>
}

@if (Organizations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Type</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var organization in Organizations.Results)
            {
                <tr>
                    <td>@organization.Id</td>
                    <td>@organization.Name</td>
                    <td>@organization.Type</td>
                    <td>@organization.IsActive</td>
                    <td>
                        <ActionLinkButton Action="view" Route="/organization" RouteValue="@organization.Id.ToString()"></ActionLinkButton>
                        @if (isLoggedOn())
                        {
                            <ActionLinkButton Action="edit" Route="/organization" RouteValue="@organization.Id.ToString()"></ActionLinkButton>
                            <ActionLinkButton Action="delete" Route="/organization" RouteValue="@organization.Id.ToString()"></ActionLinkButton>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pager Result=@Organizations PageChanged=@PagerPageChanged />
}

@functions {
    [Parameter]
    protected string Page { get; set; } = "1";
    [Parameter]
    protected string Transaction { get; set; }

    protected PagedResult<Organization> Organizations;

    protected override async Task OnParametersSetAsync()
    {
        if (UriHelper.GetBaseUri() == "http://localhost:10001/")
        {
            Organizations = await Http.GetJsonAsync<PagedResult<Organization>>("http://localhost:10002/api/organization/?page=" + Page);
        }
        else
        {
            Organizations = await Http.GetJsonAsync<PagedResult<Organization>>("http://becksapi.azurewebsites.net/api/organization/?page=" + Page);
        }
    }
    protected void PagerPageChanged(int page)
    {
        Transaction = string.Empty;
        UriHelper.NavigateTo("/organization/list/" + page);
    }

    protected bool isLoggedOn()
    {
        return (Storage["JWT-Token"] != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage["JWT-Time-Exire"]));
    }
}