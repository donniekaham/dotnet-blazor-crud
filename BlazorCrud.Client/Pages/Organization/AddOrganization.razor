@page "/organization/new"
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h1>Create</h1>
<h3>Organization</h3>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@organization" OnValidSubmit="@CreateOrganization">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="Name" class="control-label">Name</label>
                <InputText id="Name" class="form-control" @bind-Value="organization.Name" />
                <ValidationMessage For="@(() => organization.Name)"/>
            </div>
            <div class="form-group">
                <label for="Gender" class="control-label">Type</label>
                <InputSelect id="Gender" class="form-control" @bind-Value="organization.Type">
                    <option value="">-- Select Type --</option>
                    <option value="Healthcare Provider">Healthcare Provider</option>
                    <option value="Hospital Department">Hospital Department</option>
                    <option value="Organizational Team">Organizational Team</option>
                    <option value="Government">Government</option>
                    <option value="Insurance Company">Insurance Company</option>
                    <option value="Educational Institute">Educational Institute</option>
                    <option value="Religous Institution">Religous Institution</option>
                    <option value="Clinical Research Sponsor">Clinical Research Sponsor</option>
                    <option value="Community Group">Community Group</option>
                    <option value="Non-Healthcare Business or Corporation">Non-Healthcare Business or Coporation</option>
                    <option value="Other">Other</option>
                </InputSelect>
                <ValidationMessage For="@(() => organization.Type)" />
            </div>
            <div class="form-group">
                <div class="form-check">
                    <InputCheckbox id="Active" class="form-check-input" @bind-Value="organization.IsActive" />
                    <label for="Active" class="form-check-label">Active</label>
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-success">Save</button>
                <button class="btn btn-primary" @onclick="cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    Organization organization = new Organization();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!(Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")))) // not logged on
        {
            UriHelper.NavigateTo("/user/login");
        }
    }

    protected async Task CreateOrganization()
    {
        var token = Storage.GetItem("JWT-Token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.SendJsonAsync(HttpMethod.Post, Storage.GetItem("environment_uri") + "/organization", organization);
        Storage.SetItem("Transaction", "modified");
        UriHelper.NavigateTo("/organization/list/1");
    }

    void cancel()
    {
        Storage.SetItem("Transaction", "cancelled");
        UriHelper.NavigateTo("/organization/list/1");
    }
}
