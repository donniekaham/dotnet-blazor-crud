@page "/user/login"
@page "/user/login/{Transaction}"
@addTagHelper *, BlazorStrap
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject LocalStorage Storage
@inject Sotsera.Blazor.Toaster.IToaster toaster

@if (Transaction == "invalid")
{
    toaster.Error("Invalid username and/or password. Please retry your credentials.", "Invalid Credentials");
}

<h1>Login</h1>
<h3>User</h3>
<hr />

<div class="row">
    <div class="col-md-4">
        <ValidatedForm Model="@login" OnSubmit="@LogonUser">
            <div class="form-group">
                <label for="Username" class="control-label">User Name</label>
                <input for="Username" class="form-control" bind="@login.Username" />
                <ClientValidationError FieldName="Username" Model="login" />
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label">Password</label>
                <input asp-for="Password" class="form-control" type="password" bind="@login.Password" />
                <ClientValidationError FieldName="Password" Model="login" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-success">Login</button>
                <button class="btn btn-primary" onclick="@cancel">Cancel</button>
            </div>
        </ValidatedForm>
    </div>
</div>

@functions {
[Parameter]
protected string Transaction { get; set; }

Login login = new Login();

protected async Task LogonUser(UIEventArgs ev)
{
    var response = await Http.PostJsonAsync<JwtToken>(Storage["environment_uri"] + "/user/logon", login);
    Storage["JWT-Token"] = response.token;
    Storage["JWT-Time-Exire"] = (DateTime.Now.Ticks + 432000000000).ToString(); // Add 750 minutes to current time

    login.Username = string.Empty;
    login.Password = string.Empty;

    if (response.token == string.Empty)
    {
        Transaction = string.Empty;
        UriHelper.NavigateTo("/user/login/invalid");
    }
    else
    {
        UriHelper.NavigateTo("/");
    }
}

void cancel()
{
    UriHelper.NavigateTo("/");
}
}