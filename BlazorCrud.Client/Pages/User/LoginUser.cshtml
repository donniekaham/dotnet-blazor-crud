@page "/user/login"
@page "/user/login/{Transaction}"
@addTagHelper *, BlazorStrap
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject LocalStorage Storage
@inject Sotsera.Blazor.Toaster.IToaster toaster

@if (Transaction == "invalid")
{
    toaster.Error("Invalid username and/or password. Please retry your credentials.", "Invalid Credentials");
}

<div class="form-signin">
    <div class="text-center">
        <img src="img/blazorbrand.png" />
    </div>
    <ValidatedForm Model="@login" OnSubmit="@LogonUser">
        <h1 class="h3 mb-3 text-center">Please sign in</h1>
        <div class="form-group">
            <input for="Username" class="form-control" placeholder="User name" bind="@login.Username" />
            <ClientValidationError FieldName="Username" Model="login" />
        </div>
        <div class="form-group">
            <input asp-for="Password" class="form-control" type="password" placeholder="Password" bind="@login.Password" />
            <ClientValidationError FieldName="Password" Model="login" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-lg btn-primary btn-block">Sign in</button>
        </div>
    </ValidatedForm>
</div>

@functions {
[Parameter]
protected string Transaction { get; set; }

Login login = new Login();

protected async Task LogonUser(UIEventArgs ev)
{
    var response = await Http.PostJsonAsync<JwtToken>(Storage["environment_uri"] + "/user/logon", login);
    Storage["JWT-Token"] = response.token;
    Storage["JWT-Time-Exire"] = (DateTime.Now.Ticks + 432000000000).ToString(); // Add 750 minutes to current time

    login.Username = string.Empty;
    login.Password = string.Empty;

    if (response.token == string.Empty)
    {
        Transaction = string.Empty;
        UriHelper.NavigateTo("/user/login/invalid");
    }
    else
    {
        UriHelper.NavigateTo("/");
    }
}

void cancel()
{
    UriHelper.NavigateTo("/");
}
}