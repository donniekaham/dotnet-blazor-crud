@page "/user/edit/{Id}"
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h1>Edit</h1>
<h3>User</h3>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@user" OnValidSubmit="@UpdateUser">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="Username" class="control-label">User Name</label>
                <InputText id="Username" class="form-control" @bind-Value="user.Username" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>
            <div class="form-group">
                <label for="Lastname" class="control-label">Last Name</label>
                <InputText id="Lastname" class="form-control" @bind-Value="user.LastName" />
                <ValidationMessage For="@(() => user.LastName)" />
            </div>
            <div class="form-group">
                <label for="Firstname" class="control-label">First Name</label>
                <InputText id="Firstname" class="form-control" @bind-Value="user.FirstName" />
                <ValidationMessage For="@(() => user.FirstName)" />
            </div>
            <div class="form-group">
                <label for="Email" class="control-label">Email</label>
                <InputText id="Email" class="form-control" @bind-Value="user.Email" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label">Password</label>
                <InputText id="Password" class="form-control" type="password" @bind-Value="user.Password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-success">Save</button>
                <button class="btn btn-primary" @onclick="cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    User user = new User();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!(Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")))) // not logged on
        {
            UriHelper.NavigateTo("/user/login");
        }

        user = await Http.GetJsonAsync<User>(Storage.GetItem("environment_uri") + "/user/" + Convert.ToInt32(Id));
    }

    protected async Task UpdateUser()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.SendJsonAsync(HttpMethod.Put, Storage.GetItem("environment_uri") + "/user/" + Convert.ToInt32(Id), user);
        Storage.SetItem("Transaction", "modified");
        UriHelper.NavigateTo("/user/list/1");
    }
    void cancel()
    {
        Storage.SetItem("Transaction", "cancelled");
        UriHelper.NavigateTo("/user/list/1");
    }
}
