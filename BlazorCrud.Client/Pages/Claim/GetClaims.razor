@page "/claim/list/{Page}"
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster

@if (Storage.GetItem("Transaction") == "modified")
{
    Toaster.Success("Claim successfully updated in the system.", "Claim Updated");
    Storage.RemoveItem("Transaction");
}

<h1>Claim Data</h1>

<div class="row mb-3">
    <div class="col-md-7">
        @if (isLoggedOn())
        {
        <BSButton Class="btn btn-primary" @onclick="AddClaim">Add New Claim</BSButton>
        }
    </div>
    <div class="input-group col-md-5 text-md-right">
        <input name="ClaimSearchInput" type="text" class="form-control" placeholder="Patient or Organization" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
        <div class="input-group-btn">
            <button name="ClaimSearchButton" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="ClaimSearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (Claims == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BSTable IsResponsive="true" class='table'>
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Patient</th>
                <th>Organization</th>
                <th>Status</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var claim in Claims.Results)
            {
                <tr>
                    <td>@claim.Id</td>
                    <td>@claim.Patient</td>
                    <td>@claim.Organization</td>
                    <td>@claim.Status</td>
                    <td>@claim.Type</td>
                    <td>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-eye text-primary" @onclick="@(async () => await ViewClaim(claim.Id))"></BSButton>
                        @if (isLoggedOn())
                        {
                            <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-pencil text-warning" @onclick="@(async () => await UpdateClaim(claim.Id))"></BSButton>
                            <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-trash text-danger" @onclick="@(async () => await DeleteClaim(claim.Id))"></BSButton>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </BSTable>
    <Pager Result=@Claims PageChanged=PagerPageChanged />
}

<div>
    <BSModal @bind-IsOpen="@isAdd" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@modalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-12">
                <EditForm Model="ClaimsModel" OnValidSubmit="CreateClaim">
                    <FluentValidator TValidator="ClaimViewModelValidator" />
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label class="control-label">Patient</label>
                            <BlazoredTypeahead SearchMethod="GetPatients"
                                               @bind-Value="ClaimsModel.SelectedPatient"
                                               EnableDropDown="true"
                                               class="form-control"
                                               placeholder="Search by patient name...">
                                <SelectedTemplate Context="patient">
                                    @patient.Name
                                </SelectedTemplate>
                                <ResultTemplate Context="patient">
                                    @patient.Name (@patient.State)
                                </ResultTemplate>
                            </BlazoredTypeahead>
                            <ValidationMessage For="@(() => ClaimsModel.SelectedPatient)" />
                        </div>
                        <div class="form-group col-md-6">
                            <label class="control-label">Provider</label>
                            <BlazoredTypeahead SearchMethod="GetProviders"
                                               @bind-Value="ClaimsModel.SelectedOrganization"
                                               EnableDropDown="true"
                                               class="form-control"
                                               placeholder="Search by provider name...">
                                <SelectedTemplate Context="organization">
                                    @organization.Name
                                </SelectedTemplate>
                                <ResultTemplate Context="organization">
                                    @organization.Name (@organization.Type)
                                </ResultTemplate>
                            </BlazoredTypeahead>
                            <ValidationMessage For="@(() => ClaimsModel.SelectedOrganization)" />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label class="control-label">Type</label>
                            <InputSelect id="Type" class="form-control" @bind-Value="ClaimsModel.Type">
                                <option value="">-- Select Type --</option>
                                <option value="Institutional">Institutional</option>
                                <option value="Oral">Oral</option>
                                <option value="Pharmacy">Pharmacy</option>
                                <option value="Professional">Professional</option>
                                <option value="Vision">Vision</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => ClaimsModel.Type)" />
                        </div>
                        <div class="form-group col-md-6">
                            <label class="control-label">Status</label>
                            <InputSelect id="Status" class="form-control" @bind-Value="ClaimsModel.Status">
                                <option value="">-- Select Status --</option>
                                <option value="Active">Active</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Draft">Draft</option>
                                <option value="Entered-in-Error">Entered-in-Error</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => ClaimsModel.Status)" />
                        </div>
                    </div>

                    <hr />
                    <h5>Claim Line Item</h5>
                    <hr />

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label class="control-label">Service</label>
                        </div>
                        <div class="form-group col-md-5">
                            <label class="control-label">Amount</label>
                        </div>
                    </div>

                    <ValidationMessage For="@(() => ClaimsModel.LineItems)" />
                    @foreach (var lineItem in ClaimsModel.LineItems)
                    {
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <InputSelect id="Service" class="form-control" placeholder="Service" @bind-Value="lineItem.Service">
                                    <option value="">-- Select Service --</option>
                                    <option value="Medical Care">Medical Care</option>
                                    <option value="Surgery">Surgery</option>
                                    <option value="Consultation">Consultation</option>
                                    <option value="Diagnostic X-Ray">Diagnostic X-Ray</option>
                                    <option value="Diagnostic Lab">Diagnostic Lab</option>
                                    <option value="Radiation Therapy">Radiation Therapy</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => lineItem.Service)" />
                            </div>
                            <div class="form-group col-md-5">
                                <InputNumber id="Amount" class="form-control" placeholder="Provider" @bind-Value="lineItem.Amount" />
                                <ValidationMessage For="@(() => lineItem.Amount)" />
                            </div>
                            <div class="form-group col-md-1">
                                <a href="javascript:void(0)" class="btn btn-danger" @onclick="@(()=>OnLineItemDelete(ClaimsModel, lineItem))">X</a>
                            </div>
                        </div>
                    }
                    <div class="form-group">
                        <a href="javascript:void(0)" class="btn btn-success" @onclick="@(()=>OnLineItemAdd(ClaimsModel))">Add Line Item</a>
                    </div>
                    <hr />
                    <div class="form-group">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </BSModalBody>
    </BSModal>
</div>

<div>
    <BSModal @bind-IsOpen="isView" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@modalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-12">
                @if (isDelete)
                {
                    <BSAlert Color="Color.Danger">Please review carefully before deleting.</BSAlert>
                }
                <hr />
                <h5>Claim Data</h5>
                <hr />

                <br />
                <BSTable IsResponsive="true" class="table">
                    <tr>
                        <td>Id</td>
                        <td>@claim.Id</td>
                    </tr>
                    <tr>
                        <td>Patient</td>
                        <td>@claim.Patient</td>
                    </tr>
                    <tr>
                        <td>Organization</td>
                        <td>@claim.Organization</td>
                    </tr>
                    <tr>
                        <td>Status</td>
                        <td>@claim.Status</td>
                    </tr>
                    <tr>
                        <td>Type</td>
                        <td>@claim.Type</td>
                    </tr>
                    <tr>
                        <td>Date Modified</td>
                        <td>@claim.ModifiedDate</td>
                    </tr>
                </BSTable>

                <hr />
                <h5>Line Items</h5>
                <hr />

                <BSTable IsResponsive="true" class='table'>
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>Service</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var lineItem in claim.LineItems)
                        {
                            <tr>
                                <td>@lineItem.Id</td>
                                <td>@lineItem.Service</td>
                                <td>@string.Format("{0:C}", lineItem.Amount)</td>
                            </tr>
                        }
                    </tbody>
                </BSTable>

                <div class="form-group">
                    @if (isDelete)
                    {
                        <button type="button" class="btn btn-danger" @onclick="(async () => await RemoveClaim())">Delete</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    }
                    @if (!isDelete)
                    {
                        <button class="btn btn-primary" @onclick="CloseModal">Back</button>
                    }
                </div>
            </div>
        </BSModalBody>
    </BSModal>
</div>

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    protected PagedResult<Claim> Claims;

    private ClaimViewModel ClaimsModel = new ClaimViewModel
    {
        SelectedPatient = null,
        SelectedOrganization = null,
        Type = "",
        Status = "",
        LineItems = new List<BlazorCrud.Shared.ViewModels.LineItem>
        {
            new BlazorCrud.Shared.ViewModels.LineItem {Service="", Amount=0}
        }
    };

    protected Claim claim = new Claim
    {
        Patient = "",
        Organization = "",
        Status = "",
        Type = "",
        LineItems = new List<BlazorCrud.Shared.Models.LineItem>
        {
            new BlazorCrud.Shared.Models.LineItem { Service = "", Amount = 0}
        }
    };

    protected int CurrentClaimId { get; set; }
    protected string modalTitle { get; set; }
    protected bool isAdd { get; set; }
    protected bool isView { get; set; }
    protected bool isDelete { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Claims = await Http.GetJsonAsync<PagedResult<Claim>>(Storage["environment_uri"] + "/claim/?name=" + SearchTerm + "&page=" + Page);
    }

    protected bool isLoggedOn()
    {
        return (Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")));
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            Claims = await Http.GetJsonAsync<PagedResult<Claim>>(Storage.GetItem("environment_uri") + "/claim/?name=" + SearchTerm + "&page=1");
            return;
        }

        Claims = await Http.GetJsonAsync<PagedResult<Claim>>(Storage.GetItem("environment_uri") + "/claim/?name=" + SearchTerm + "&page=1");
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        Claims = await Http.GetJsonAsync<PagedResult<Claim>>(Storage.GetItem("environment_uri") + "/claim/?page=1");
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/claim/list/" + page);
    }

    private async Task<IEnumerable<Patient>> GetPatients(string searchText)
    {
        var result = await Http.GetJsonAsync<List<Patient>>(Storage.GetItem("environment_uri") + "/patient/TypeAhead?name=" + searchText);
        return result;
    }

    private async Task<IEnumerable<Organization>> GetProviders(string searchText)
    {
        var result = await Http.GetJsonAsync<List<Organization>>(Storage.GetItem("environment_uri") + "/organization/TypeAhead?name=" + searchText);
        return result;
    }

    protected void AddClaim()
    {
        this.isAdd = true;
        this.modalTitle = "Create Claim";
    }

    protected async Task UpdateClaim(int ClaimId)
    {
        ClaimsModel = await Http.GetJsonAsync<ClaimViewModel>(Storage.GetItem("environment_uri") + "/claimviewmodel/" + Convert.ToInt32(ClaimId));
        CurrentClaimId = ClaimId;
        this.isAdd = true;
        this.modalTitle = "Edit Claim";
    }

    protected async Task ViewClaim(int ClaimId)
    {
        claim = await Http.GetJsonAsync<Claim>(Storage.GetItem("environment_uri") + "/claim/" + Convert.ToInt32(ClaimId));
        CurrentClaimId = ClaimId;
        this.isView = true;
        this.modalTitle = "View Claim";
    }

    protected async Task DeleteClaim(int ClaimId)
    {
        claim = await Http.GetJsonAsync<Claim>(Storage.GetItem("environment_uri") + "/claim/" + Convert.ToInt32(ClaimId));
        CurrentClaimId = ClaimId;
        this.isView = true;
        this.isDelete = true;
        this.modalTitle = "Delete Claim";
    }

    protected async Task CreateClaim()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        if (CurrentClaimId == 0)
        {
            await Http.SendJsonAsync(HttpMethod.Post, Storage.GetItem("environment_uri") + "/claim", ClaimsModel);
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, Storage.GetItem("environment_uri") + "/claim/" + Convert.ToInt32(CurrentClaimId), ClaimsModel);
        }
        CloseModal();
        Storage.SetItem("Transaction", "modified");
        await OnParametersSetAsync();
    }

    protected async Task RemoveClaim()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.DeleteAsync(Storage.GetItem("environment_uri") + "/claim/" + Convert.ToInt32(CurrentClaimId));
        CloseModal();
        Storage.SetItem("Transaction", "modified");
        await OnParametersSetAsync();
    }

    protected void CloseModal()
    {
        claim = new Claim
        {
            Patient = "",
            Organization = "",
            Status = "",
            Type = "",
            LineItems = new List<BlazorCrud.Shared.Models.LineItem>
            {
                new BlazorCrud.Shared.Models.LineItem { Service = "", Amount = 0}
            }
        };
        CurrentClaimId = 0;
        this.isAdd = false;
        this.isView = false;
        this.isDelete = false;
        StateHasChanged();
    }

    public void OnLineItemDelete(ClaimViewModel claimModel, BlazorCrud.Shared.ViewModels.LineItem lineItem)
    {
        claimModel.LineItems.Remove(lineItem);
    }

    public void OnLineItemAdd(ClaimViewModel claimModel)
    {
        claimModel.LineItems.Add(new BlazorCrud.Shared.ViewModels.LineItem { Service = "", Amount = 0 });
    }
}
