@page "/claim/typeahead"
@inject HttpClient httpClient
@inject LocalStorage Storage

<h3>Blazored Typeahead - Claims Page Prototype</h3>

<EditForm Model="ClaimsModel" OnValidSubmit="HandleFormSubmit">
    <FluentValidator TValidator="ClaimViewModelValidator" />
    <br />
    <h5>Claim Details</h5>
    <hr />
    <p>
        <div>
            <label class="control-label">Patient</label>
            <BlazoredTypeahead SearchMethod="GetPatients"
                               @bind-Value="ClaimsModel.SelectedPatient"
                               EnableDropDown="true"
                               class="form-control"
                               placeholder="Search by patient name...">
                <SelectedTemplate Context="patient">
                    @patient.Name
                </SelectedTemplate>
                <ResultTemplate Context="patient">
                    @patient.Name (@patient.State)
                </ResultTemplate>
            </BlazoredTypeahead>
            <ValidationMessage For="@(() => ClaimsModel.SelectedPatient)" />
        </div>
    </p>
    <p>
        <div>
            <label class="control-label">Provider</label>
            <BlazoredTypeahead SearchMethod="GetProviders"
                               @bind-Value="ClaimsModel.SelectedOrganization"
                               EnableDropDown="true"
                               class="form-control"
                               placeholder="Search by provider name...">
                <SelectedTemplate Context="organization">
                    @organization.Name
                </SelectedTemplate>
                <ResultTemplate Context="organization">
                    @organization.Name (@organization.Type)
                </ResultTemplate>
            </BlazoredTypeahead>
            <ValidationMessage For="@(() => ClaimsModel.SelectedOrganization)" />
        </div>
    </p>
    <p>
        <div>
            <label class="control-label">Type</label>
            <InputSelect id="Type" class="form-control" @bind-Value="ClaimsModel.Type">
                <option value="">-- Select Type --</option>
                <option value="Institutional">Institutional</option>
                <option value="Oral">Oral</option>
                <option value="Pharmacy">Pharmacy</option>
                <option value="Professional">Professional</option>
                <option value="Vision">Vision</option>
            </InputSelect>
            <ValidationMessage For="@(() => ClaimsModel.Type)" />
        </div>
    </p>
    <p>
        <div>
            <label class="control-label">Status</label>
            <InputSelect id="Status" class="form-control" @bind-Value="ClaimsModel.Status">
                <option value="">-- Select Status --</option>
                <option value="Active">Active</option>
                <option value="Cancelled">Cancelled</option>
                <option value="Draft">Draft</option>
                <option value="Entered-in-Error">Entered-in-Error</option>
            </InputSelect>
            <ValidationMessage For="@(() => ClaimsModel.Status)" />
        </div>
    </p>
    <br />
    <h5>Claim Line Item</h5>
    <hr />

    <div class="form-row">
        <div class="form-group col-md-6">
            <label class="control-label">Service</label>
        </div>
        <div class="form-group col-md-5">
            <label class="control-label">Amount</label>
        </div>
    </div>

    <ValidationMessage For="@(() => ClaimsModel.LineItems)" />
    @foreach (var lineItem in ClaimsModel.LineItems)
    {
        <div class="form-row">
            <div class="form-group col-md-6">
                <InputSelect id="Service" class="form-control" placeholder="Service" @bind-Value="lineItem.Service">
                    <option value="">-- Select Service --</option>
                    <option value="Medical Care">Medical Care</option>
                    <option value="Surgery">Surgery</option>
                    <option value="Consultation">Consultation</option>
                    <option value="Diagnostic X-Ray">Diagnostic X-Ray</option>
                    <option value="Diagnostic Lab">Diagnostic Lab</option>
                    <option value="Radiation Therapy">Radiation Therapy</option>
                </InputSelect>
                <ValidationMessage For="@(() => lineItem.Service)" />
            </div>
            <div class="form-group col-md-5">
                <InputNumber id="Amount" class="form-control" placeholder="Provider" @bind-Value="lineItem.Amount" />
                <ValidationMessage For="@(() => lineItem.Amount)" />
            </div>
            <div class="form-group col-md-1">
                <a href="javascript:void(0)" class="btn btn-danger" @onclick="@(()=>OnLineItemDelete(ClaimsModel, lineItem))">X</a>
            </div>
        </div>
    }

    <div class="form-group">
        <a href="javascript:void(0)" class="btn btn-success" @onclick="@(()=>OnLineItemAdd(ClaimsModel))">Add Line Item</a>
    </div>
    <hr />
    <div class="form-group">
        <button type="submit" class="btn btn-success">Save</button>
    </div>
</EditForm>

@code{
    private ClaimViewModel ClaimsModel = new ClaimViewModel
    {
        SelectedPatient = null,
        SelectedOrganization = null,
        Type = "",
        Status = "",
        LineItems = new List<BlazorCrud.Shared.ViewModels.LineItem>
    {
            new BlazorCrud.Shared.ViewModels.LineItem {Service="", Amount=0}
        }
    };

    public void OnLineItemDelete(ClaimViewModel claimModel, BlazorCrud.Shared.ViewModels.LineItem lineItem)
    {
        claimModel.LineItems.Remove(lineItem);
    }

    public void OnLineItemAdd(ClaimViewModel claimModel)
    {
        claimModel.LineItems.Add(new BlazorCrud.Shared.ViewModels.LineItem { Service = "", Amount = 0 });
    }

    private async Task<IEnumerable<Patient>> GetPatients(string searchText)
    {
        var result = await httpClient.GetJsonAsync<List<Patient>>(Storage.GetItem("environment_uri") + "/patient/TypeAhead?name=" + searchText);
        return result;
    }

    private async Task<IEnumerable<Organization>> GetProviders(string searchText)
    {
        var result = await httpClient.GetJsonAsync<List<Organization>>(Storage.GetItem("environment_uri") + "/organization/TypeAhead?name=" + searchText);
        return result;
    }

    private void HandleFormSubmit()
    {
        Console.WriteLine("Form Submitted Successfully!");
        Console.WriteLine("Patient Name: " + ClaimsModel.SelectedPatient.Name);
        Console.WriteLine("Provider Name: " + ClaimsModel.SelectedOrganization.Name);
        Console.WriteLine("Claim Type: " + ClaimsModel.Type);
        Console.WriteLine("Claim Status: " + ClaimsModel.Status);
        int i = 1;
        foreach (BlazorCrud.Shared.ViewModels.LineItem li in ClaimsModel.LineItems)
        {
            Console.WriteLine("Claim Line Item " + i + " --> " + "Service: " + li.Service + ", Amount: " + li.Amount);
            i++;
        }
    }
}