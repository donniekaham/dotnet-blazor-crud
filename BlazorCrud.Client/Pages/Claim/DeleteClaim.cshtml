@page "/claim/delete/{Id}"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject LocalStorage Storage

<h1>Delete</h1>
<h3>Are you sure you want to delete the claim with id : @Id</h3>

<br />
<div class="col-md-4">
    <table class="table">
        <tr>
            <td>Patient</td>
            <td>@claim.Patient</td>
        </tr>
        <tr>
            <td>Organization</td>
            <td>@claim.Organization</td>
        </tr>
        <tr>
            <td>Status</td>
            <td>@claim.Status</td>
        </tr>
        <tr>
            <td>Type</td>
            <td>@claim.Type</td>
        </tr>
    </table>
    <div class="form-group">
        <button type="button" class="btn btn-danger" onclick="@(async () => await RemoveClaim())">Delete</button>
        <button class="btn btn-primary" onclick="@cancel">Cancel</button>
    </div>
</div>

@functions {
    [Parameter]
    string Id { get; set; }

    Claim claim = new Claim();

    protected override async Task OnInitAsync()
    {
        if (!(Storage["JWT-Token"] != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage["JWT-Time-Exire"]))) // not logged on
        {
            UriHelper.NavigateTo("/user/login");
        }

        claim = await Http.GetJsonAsync<Claim>(Storage["environment_uri"] + "/claim/" + Convert.ToInt32(Id));
    }

    protected async Task RemoveClaim()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.DeleteAsync(Storage["environment_uri"] + "/claim/" + Convert.ToInt32(Id));

        UriHelper.NavigateTo("/claim/modified");
    }
    void cancel()
    {
        UriHelper.NavigateTo("/claim/cancelled");
    }
}