@page "/claim/delete/{Id}"
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h1>Delete</h1>
<h3>Are you sure you want to delete the claim with id : @Id</h3>

<br />
<div class="col-md-6">
    <BSTable IsResponsive="true" class="table">
        <tr>
            <td>Patient</td>
            <td>@claim.Patient</td>
        </tr>
        <tr>
            <td>Organization</td>
            <td>@claim.Organization</td>
        </tr>
        <tr>
            <td>Status</td>
            <td>@claim.Status</td>
        </tr>
        <tr>
            <td>Type</td>
            <td>@claim.Type</td>
        </tr>
    </BSTable>
    <div class="form-group">
        <button type="button" class="btn btn-danger" @onclick="(async () => await RemoveClaim())">Delete</button>
        <button class="btn btn-primary" @onclick="cancel">Cancel</button>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    Claim claim = new Claim();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        if (!(Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")))) // not logged on
        {
            UriHelper.NavigateTo("/user/login");
        }

        claim = await Http.GetJsonAsync<Claim>(Storage.GetItem("environment_uri") + "/claim/" + Convert.ToInt32(Id));
    }

    protected async Task RemoveClaim()
    {
        var token = Storage.GetItem("JWT-Token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.DeleteAsync(Storage.GetItem("environment_uri") + "/claim/" + Convert.ToInt32(Id));
        Storage.SetItem("Transaction", "modified");
        UriHelper.NavigateTo("/claim/list/1");
    }
    void cancel()
    {
        Storage.SetItem("Transaction", "cancelled");
        UriHelper.NavigateTo("/claim/list/1");
    }
}
