@page "/patient/edit/{Id}"
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h1>Edit</h1>
<h3>Patient</h3>

<hr />
<h5>Demographic Data</h5>
<hr />
<EditForm Model="@patient" OnValidSubmit="@UpdatePatient">
    <FluentValidator TValidator="PatientValidator" />
    <div class="form-row">
        <div class="form-group col-md-4">
            <InputText id="Name" class="form-control" placeholder="Name" @bind-Value="patient.Name" />
            <ValidationMessage For="@(() => patient.Name)" />
        </div>
        <div class="form-group col-md-2">
            <InputSelect id="Gender" class="form-control" @bind-Value="patient.Gender">
                <option value="">-- Select Gender --</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </InputSelect>
            <ValidationMessage For="@(() => patient.Gender)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <InputText id="PrimaryCareProvider" class="form-control" placeholder="Primary Care Provider" @bind-Value="patient.PrimaryCareProvider" />
            <ValidationMessage For="@(() => patient.PrimaryCareProvider)" />
        </div>
        <div class="form-group col-md-2">
            <InputText id="State" class="form-control" placeholder="State Abbreviation" @bind-Value="patient.State" />
            <ValidationMessage For="@(() => patient.State)" />
        </div>
    </div>

    <hr />
    <h5>Contact Point</h5>
    <hr />

    <ValidationMessage For="@(() => patient.Contacts)" />
    @foreach (var contactPoint in patient.Contacts)
    {
        <div class="form-row">
            <div class="form-group col-md-2">
                <InputSelect id="System" class="form-control" placeholder="System" @bind-Value="contactPoint.System">
                    <option value="">-- Select System --</option>
                    <option value="Phone">Phone</option>
                    <option value="Fax">Fax</option>
                    <option value="Email">Email</option>
                    <option value="Pager">Pager</option>
                    <option value="SMS">SMS</option>
                    <option value="Other">Other</option>
                </InputSelect>
                <ValidationMessage For="@(() => contactPoint.System)" />
            </div>
            <div class="form-group col-md-2">
                <InputText id="Value" class="form-control" placeholder="Value" @bind-Value="contactPoint.Value" />
                <ValidationMessage For="@(() => contactPoint.Value)" />
            </div>
            <div class="form-group col-md-2">
                <InputSelect id="Use" class="form-control" placeholder="Use" @bind-Value="contactPoint.Use">
                    <option value="">-- Select Use --</option>
                    <option value="Home">Home</option>
                    <option value="Work">Work</option>
                    <option value="Temp">Temp</option>
                    <option value="Old">Old</option>
                    <option value="Mobile">Mobile</option>
                </InputSelect>
                <ValidationMessage For="@(() => contactPoint.Use)" />
            </div>
            <div class="form-group col-md-1">
                <a href="javascript:void(0)" class="btn btn-danger" @onclick="@(()=>OnContactDelete(patient, contactPoint))">X</a>
            </div>
        </div>
    }
    <div class="form-group">
        <a href="javascript:void(0)" class="btn btn-success" @onclick="@(()=>OnContactAdd(patient))">Add Contact</a>
    </div>
    <hr />

    <div class="form-group">
        <button type="submit" class="btn btn-success">Save</button>
        <button class="btn btn-primary" @onclick="cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }
    
    Patient patient = new Patient
    {
        Name = "",
        PrimaryCareProvider = "",
        Gender = "",
        State = "",
        Contacts = new List<ContactPoint>
        {
            new ContactPoint { System = "", Value = "", Use = "" }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        if (!(Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")))) // not logged on
        {
            UriHelper.NavigateTo("/user/login");
        }

        patient = await Http.GetJsonAsync<Patient>(Storage.GetItem("environment_uri") + "/patient/" + Convert.ToInt32(Id));
    }

    protected async Task UpdatePatient()
    {
        var token = Storage.GetItem("JWT-Token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.SendJsonAsync(HttpMethod.Put, Storage.GetItem("environment_uri") + "/patient/" + Convert.ToInt32(Id), patient);
        Storage.SetItem("Transaction", "modified");
        UriHelper.NavigateTo("/patient/list/1");
    }

    public void OnContactDelete(Patient patient, ContactPoint contactPoint)
    {
        patient.Contacts.Remove(contactPoint);
    }

    public void OnContactAdd(Patient patient)
    {
        patient.Contacts.Add(new ContactPoint { System = "", Value = "", Use = "" });
    }

    void cancel()
    {
        Storage.SetItem("Transaction", "cancelled");
        UriHelper.NavigateTo("/patient/list/1");
    }
}
