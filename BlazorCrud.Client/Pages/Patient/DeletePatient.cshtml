@page "/patient/delete/{Id}"
@inject HttpClient Http
@addTagHelper *, BlazorStrap
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject LocalStorage Storage

<h1>Delete</h1>
<h3>Are you sure you want to delete the patient with id : @Id</h3>

<hr />
<h5>Demographic Data</h5>
<hr />

<br />
<div class="col-md-4">
    <table class="table">
        <tr>
            <td>Id</td>
            <td>@patient.Id</td>
        </tr>
        <tr>
            <td>Name</td>
            <td>@patient.Name</td>
        </tr>
        <tr>
            <td>Gender</td>
            <td>@patient.Gender</td>
        </tr>
        <tr>
            <td>Primary Care Provider</td>
            <td>@patient.PrimaryCareProvider</td>
        </tr>
        <tr>
            <td>State</td>
            <td>@patient.State</td>
        </tr>
    </table>
</div>

<hr />
<h5>Contact Points</h5>
<hr />

<BlazorTable IsResponsive="true" class='table'>
    <thead class="thead-light">
        <tr>
            <th>ID</th>
            <th>System</th>
            <th>Value</th>
            <th>Use</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contactPoint in patient.Contacts)
        {
            <tr>
                <td>@contactPoint.Id</td>
                <td>@contactPoint.System</td>
                <td>@contactPoint.Value</td>
                <td>@contactPoint.Use</td>
            </tr>
        }
    </tbody>
</BlazorTable>

<div class="form-group">
    <button type="button" class="btn btn-danger" onclick="@(async () => await RemovePatient())">Delete</button>
    <button class="btn btn-primary" onclick="@cancel">Cancel</button>
</div>

@functions {
[Parameter]
string Id { get; set; }

Patient patient = new Patient
{
    Name = "",
    PrimaryCareProvider = "",
    Gender = "",
    State = "",
    Contacts = new List<ContactPoint>
{
    new ContactPoint { System = "", Value = "", Use = "" }
}
};

protected override async Task OnInitAsync()
{
    if (!(Storage["JWT-Token"] != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage["JWT-Time-Exire"]))) // not logged on
    {
        UriHelper.NavigateTo("/user/login");
    }

    if (UriHelper.GetBaseUri() == "http://localhost:10001/")
    {
        patient = await Http.GetJsonAsync<Patient>("http://localhost:10002/api/patient/" + Convert.ToInt32(Id));
    }
    else
    {
        patient = await Http.GetJsonAsync<Patient>("http://becksapi.azurewebsites.net/api/patient/" + Convert.ToInt32(Id));
    }
}

protected async Task RemovePatient()
{
    if (UriHelper.GetBaseUri() == "http://localhost:10001/")
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.DeleteAsync("http://localhost:10002/api/patient/" + Convert.ToInt32(Id));
    }
    else
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.DeleteAsync("http://becksapi.azurewebsites.net/api/patient/" + Convert.ToInt32(Id));
    }
    UriHelper.NavigateTo("/patient/modified");
}
void cancel()
{
    UriHelper.NavigateTo("/patient/cancelled");
}
}