@page "/upload/list/{Page}"
@inject HttpClient Http
@inject IJSRuntime  JSRuntime
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster

@if (localStorage.GetItem<string>("Transaction") == "modified")
{
    Toaster.Success("Upload successfully updated in the system.", "User Updated");
    localStorage.RemoveItem("Transaction");
}

<h1>Upload Data</h1>

@if (isLoggedOn())
{
    <p>
        <BSButton Class="btn btn-primary" @onclick="AddUpload">Add New Upload</BSButton>
    </p>
}

@if (Uploads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BSTable IsResponsive="true" class='table'>
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Filetype</th>
                <th>Upload Time</th>
                <th>Processed Time</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var upload in Uploads.Results)
            {
                <tr>
                    <td>@upload.Id</td>
                    <td>@upload.FileType</td>
                    <td>@upload.UploadTimestamp</td>
                    <td>@upload.ProcessedTimestamp</td>
                    <td>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-eye text-primary" @onclick="@(async () => await ViewUpload(upload.Id))"></BSButton>
                    </td>
                </tr>
            }
        </tbody>
    </BSTable>
    <Pager Result=@Uploads PageChanged=PagerPageChanged />
}

<div>
    <BSModal @bind-IsOpen="@isAdd" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@modalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-9">
                <EditForm Model="@upload" OnValidSubmit="@CreateUpload">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="FileType" class="control-label">File Type</label>

                        <InputSelect id="FileType" class="form-control" @bind-Value="upload.FileType">
                            <option value="">-- Select File Type --</option>
                            <option value="Patients">Patients</option>
                            <option value="Organizations">Organizations</option>
                            <option value="Claims">Claims</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => upload.FileType)" />
                    </div>
                    <div class="form-group">
                        <label for="FileContent" class="control-label">File</label>
                        <InputFile accept=".json" class="form-control-file" type="file" OnChange="HandleSelection" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
            <p>@status</p>
        </BSModalBody>
    </BSModal>
</div>

<div>
    <BSModal @bind-IsOpen="isView" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@modalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-9">
                <BSTable IsResponsive="true" class="table">
                    <tr>
                        <td>Id</td>
                        <td>@upload.Id</td>
                    </tr>
                    <tr>
                        <td>File Type</td>
                        <td>@upload.FileType</td>
                    </tr>
                    <tr>
                        <td>Uploaded</td>
                        <td>@upload.UploadTimestamp</td>
                    </tr>
                    <tr>
                        <td>Processed</td>
                        <td>@upload.ProcessedTimestamp</td>
                    </tr>
                    <tr>
                        <td>File</td>
                        <td>
                            <button @onclick="DownloadFile">Download</button>
                        </td>
                    </tr>
                </BSTable>
                <div class="form-group">
                    <button class="btn btn-primary" @onclick="CloseModal">Back</button>
                </div>
            </div>
        </BSModalBody>
    </BSModal>
</div>

@code {
    [Parameter]
    public string Page { get; set; } = "1";

    protected PagedResult<Upload> Uploads;
    protected Upload upload = new Upload();

    string status = "File pending upload...";

    protected int CurrentUploadId { get; set; }
    protected string modalTitle { get; set; }
    protected bool isAdd { get; set; }
    protected bool isView { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Uploads = await Http.GetFromJsonAsync<PagedResult<Upload>>(localStorage.GetItem<string>("environment_uri") + "/upload/?page=" + Page);
    }

    protected bool isLoggedOn()
    {
        return (localStorage.GetItem<string>("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(localStorage.GetItem<string>("JWT-Time-Expire")));
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/upload/list/" + page);
    }

    protected void AddUpload()
    {
        this.isAdd = true;
        this.modalTitle = "Create Upload";
    }

    protected async Task ViewUpload(int UploadId)
    {
        upload = await Http.GetFromJsonAsync<Upload>(localStorage.GetItem<string>("environment_uri") + "/upload/" + Convert.ToInt32(UploadId));
        CurrentUploadId = UploadId;
        this.isView = true;
        this.modalTitle = "View Upload";
    }

    protected async Task CreateUpload()
    {
        var token = localStorage.GetItem<string>("JWT-Token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.PostAsJsonAsync(localStorage.GetItem<string>("environment_uri") + "/upload", upload);
        CloseModal();
        localStorage.SetItem("Transaction", "modified");
        await OnParametersSetAsync();
    }

    protected void CloseModal()
    {
        upload = new Upload();
        CurrentUploadId = 0;
        this.isAdd = false;
        this.isView = false;
        StateHasChanged();
    }

    async Task HandleSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Load into memory
            //var ms = new MemoryStream();
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            //await file.Data.CopyToAsync(ms);
            status = $"Finished loading {file.Size} bytes from {file.Name}";
            upload.FileContent = Convert.ToBase64String(buffer);
        }
    }

    void DownloadFile()
    {
        JSRuntime.InvokeAsync<object>(
            "saveAsFile",
            upload.FileType,
            upload.FileContent);
    }
}