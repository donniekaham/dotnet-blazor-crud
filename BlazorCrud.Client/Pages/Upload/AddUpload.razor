@page "/upload/new"
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h1>Create</h1>
<h3>Upload</h3>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@upload" OnValidSubmit="@CreateUpload">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="FileName" class="control-label">File Name</label>
                <InputText id="FileName" class="form-control" @bind-Value="upload.FileName" />
                <ValidationMessage For="@(() => upload.FileName)" />
            </div>
            <div class="form-group">
                <label for="FileContent" class="control-label">File</label>
                <InputFile class="form-control-file" type="file" OnChange="HandleSelection" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-success">Save</button>
                <button class="btn btn-primary" @onclick="cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

<p>@status</p>

@code {
    string status = "File pending upload...";

    Upload upload = new Upload();

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Load into memory
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            status = $"Finished loading {file.Size} bytes from {file.Name}";
            upload.FileContent = Convert.ToBase64String(ms.ToArray());
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!(Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")))) // not logged on
        {
            UriHelper.NavigateTo("/user/login");
        }
    }

    protected async Task CreateUpload()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.SendJsonAsync(HttpMethod.Post, Storage.GetItem("environment_uri") + "/upload", upload);
        Storage.SetItem("Transaction", "modified");
        UriHelper.NavigateTo("/upload/list/1");
    }
    void cancel()
    {
        Storage.SetItem("Transaction", "cancelled");
        UriHelper.NavigateTo("/upload/list/1");
    }
}
